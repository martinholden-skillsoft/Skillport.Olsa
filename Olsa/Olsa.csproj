<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{A3831CCD-787A-4F97-90D8-F13AE2F4CA8A}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Olsa</RootNamespace>
    <AssemblyName>Olsa</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>
    <SGenUseProxyTypes>false</SGenUseProxyTypes>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>
    <SGenUseProxyTypes>false</SGenUseProxyTypes>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>key.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.configuration" />
    <Reference Include="System.Core" />
    <Reference Include="System.Runtime.Serialization" />
    <Reference Include="System.ServiceModel" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Olsa.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Properties\VersionAssemblyInfo.cs" />
    <Compile Include="WCF\Extensions\AuthenticationBehavior.cs" />
    <Compile Include="WCF\Extensions\AuthenticationElement.cs" />
    <Compile Include="WCF\Extensions\AuthenticationMessageHeader.cs" />
    <Compile Include="WCF\Extensions\NameSpaceFixUpBehavior.cs" />
    <Compile Include="WCF\Extensions\NameSpaceFixUpElement.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Olsa.nuspec" />
    <None Include="olsaversion.txt" />
    <None Include="key.snk" />
    <None Include="packagereadme.src" />
    <None Include="packagereadme.txt" />
    <None Include="packages.config" />
    <None Include="WCF\README.txt" />
    <None Include="_CreateNewNuGetPackage\Config.ps1" />
    <None Include="_CreateNewNuGetPackage\DoNotModify\CreateNuGetPackage.ps1" />
    <None Include="_CreateNewNuGetPackage\DoNotModify\New-NuGetPackage.ps1" />
    <None Include="_CreateNewNuGetPackage\DoNotModify\UploadNuGetPackage.ps1" />
    <None Include="_CreateNewNuGetPackage\RunMeToUploadNuGetPackage.cmd" />
  </ItemGroup>
  <ItemGroup>
    <None Include="content\app.config.install.xdt" />
    <None Include="content\app.config.transform" />
    <None Include="content\web.config.install.xdt" />
    <None Include="content\web.config.transform" />
  </ItemGroup>
  <ItemGroup>
    <None Include="_CreateNewNuGetPackage\DoNotModify\NuGet.exe" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- Custom Build Tasks/Targets-->
  <UsingTask TaskName="CleanupOlsa" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OlsaProxy ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <OlsaVersion ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs"><![CDATA[
            string path = OlsaProxy.GetMetadata("FullPath");
            Log.LogMessage(MessageImportance.High, "Starting CleanupOlsa Task");
            Log.LogMessage(MessageImportance.High, "OlsaProxyFile: {0}", path);
            Log.LogMessage(MessageImportance.High, "OlsaVersion: {0}", OlsaVersion);
            
            Log.LogMessage(MessageImportance.High, "Cleaning Up SvcUtil Generated Proxy: {0}", path);
            string pattern = @"(,*\s*Order=[0-9]+)";
            string input;
            string output;
            Regex r = new Regex(pattern, RegexOptions.IgnoreCase);
            
            Log.LogMessage(MessageImportance.High, "Step1: Removing all Order=x Attribute Parameters");
            using (StreamReader rdr = File.OpenText(path))
            {
                input = rdr.ReadToEnd();
                output = r.Replace(input, "");
            }
            
            Log.LogMessage(MessageImportance.High, "Step2: queryInclude/queryExclude issue ");
            output = output.Replace("(\"include\", typeof(queryInclude))", "(\"include\", typeof(queryExclude))");

            using (StreamWriter wrt = new StreamWriter(path))
            {
                wrt.Write(output);
            }
            
            if (OlsaVersion != null) {
              Log.LogMessage(MessageImportance.High, "Step3: writing VersionAssembyInfo");

              string _skillport72Path = @"SKILLPORT72.txt";
              File.Delete(_skillport72Path);
            
              string _version = OlsaVersion.ToString();
              string _assemPath= @"Properties\VersionAssemblyInfo.cs";
            
              string _assemVersion = "";
              _assemVersion = @"[assembly: System.Reflection.AssemblyVersion(""" + _version + @""")] //Added by build";
              _assemVersion += System.Environment.NewLine;
              _assemVersion += @"[assembly: System.Reflection.AssemblyFileVersion("""+ _version+ @""")] //Added by build";
              File.WriteAllText(_assemPath, _assemVersion);
            }
      ]]></Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="PopulateReadme" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OlsaReadmeTemplate ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <OlsaReadmeOutput ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
      <OlsaVersion ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs"><![CDATA[
      string path = OlsaReadmeTemplate.GetMetadata("FullPath");
            string outpath = OlsaReadmeOutput.GetMetadata("FullPath");
            Log.LogMessage(MessageImportance.High, "Starting UpdateReadme Task");
            Log.LogMessage(MessageImportance.High, "OlsaReadmeTemplate: {0}", path);
            Log.LogMessage(MessageImportance.High, "OlsaReadmeOutput: {0}",outpath);
            Log.LogMessage(MessageImportance.High, "OlsaVersion: {0}", OlsaVersion);
            
            string input;
            string output;

            if (OlsaVersion != null) {
              using (StreamReader rdr = File.OpenText(path))
              {
                  input = rdr.ReadToEnd();
              }
              
              output = input.Replace("~~OLSAVERSION~~", OlsaVersion.ToString());
              
              using (StreamWriter wrt = new StreamWriter(outpath))
              {
                  wrt.Write(output);
              }
            }
      ]]></Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="MartinHolden.Build.Tasks.GetVersionFromWebPage" AssemblyFile="..\lib\MartinHolden.Build.Tasks.dll" />
  <PropertyGroup>
    <CustomerName Condition=" '$(CustomerName)' == ''">my</CustomerName>
    <HostName Condition=" '$(HostName)' == ''">https://$(CustomerName).skillwsa.com</HostName>
    <!-- Controls if SVCUTIL is run using syncOnly attribute -->
    <SyncOnly>false</SyncOnly>
    <!-- Contains the Extra Parameters to include, set conditionally on target based on SyncOnly -->
    <ExtraParam>
    </ExtraParam>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEvent>
REM Create a NuGet package for this project and place the .nupkg file in the project's output directory.
REM If you see this in Visual Studio's Error List window, check the Output window's Build tab for the actual error.
ECHO Creating NuGet package in Post-Build event...
PowerShell -NoProfile -ExecutionPolicy Bypass -Command "&amp; '$(ProjectDir)_CreateNewNuGetPackage\DoNotModify\CreateNuGetPackage.ps1' -ProjectFilePath '$(ProjectPath)' -OutputDirectory '$(TargetDir)' -BuildConfiguration '$(ConfigurationName)' -BuildPlatform '$(PlatformName)'"
  </PostBuildEvent>
    
  </PropertyGroup>
  <Target Name="RecreateProxy">
    <PropertyGroup>
      <!-- Set ExtraParam to /syncOnly if SyncOnly = true AND ExtraParam has not been set on command line -->
      <ExtraParam Condition="$(SyncOnly)==true AND '$(ExtraParam)' == ''">/syncOnly</ExtraParam>
      <!-- The OLSA EndPoint -->
      <EndPoint Condition=" '$(EndPoint)' == ''">$(HostName)/olsa/services/Olsa?WSDL</EndPoint>
    </PropertyGroup>
    <Exec IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" Command="&quot;$(SDK40ToolsPath)svcutil.exe&quot; /out:Olsa /noConfig /serializer:XmlSerializer /fault /n:*,Olsa /targetClientVersion:Version35 $(ExtraParam) $(EndPoint)" />
  </Target>
  <Target Name="WriteVersion">
    <WriteLinesToFile File="olsaversion.txt" Lines="$(FullVersion)" Overwrite="true" />
  </Target>
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <PropertyGroup>
      <!-- Set ExtraParam to /syncOnly if SyncOnly = true AND ExtraParam has not been set on command line -->
      <ExtraParam Condition="$(SyncOnly)==true AND '$(ExtraParam)' == ''">/syncOnly</ExtraParam>
      <!-- The OLSA EndPoint -->
      <EndPoint Condition=" '$(EndPoint)' == ''">$(HostName)/olsa/services/Olsa?WSDL</EndPoint>
    </PropertyGroup>
    <ReadLinesFromFile File="olsaversion.txt">
      <Output TaskParameter="Lines" PropertyName="LastVersion" />
    </ReadLinesFromFile>
    <MartinHolden.Build.Tasks.GetVersionFromWebPage WebPage="https://$(CustomerName).skillport.com/skillportfe/login.action" VersionXpath="//div[contains(@class, 's-version')]">
      <Output TaskParameter="FullVersion" PropertyName="FullVersion" />
      <Output TaskParameter="Major" PropertyName="Major" />
      <Output TaskParameter="Minor" PropertyName="Minor" />
      <Output TaskParameter="Build" PropertyName="Build" />
    </MartinHolden.Build.Tasks.GetVersionFromWebPage>
    <Message Importance="HIGH" Text="LastVersion: $(LastVersion)  CurrentVersion: $(FullVersion) " />
    <MSBuild Condition="$(LastVersion) != $(FullVersion)" Projects="$(MSBuildProjectFullPath)" Targets="RecreateProxy" Properties="" />
    <MSBuild Condition="$(LastVersion) != $(FullVersion)" Projects="$(MSBuildProjectFullPath)" Targets="WriteVersion" Properties="FullVersion=$(FullVersion)" />
    <!-- Cleanup the code -->
    <CleanupOlsa OlsaProxy="Olsa.cs" OlsaVersion="$(FullVersion)">
    </CleanupOlsa>
    <PopulateReadme OlsaReadmeTemplate="packagereadme.src" OlsaReadmeOutput="packagereadme.txt" OlsaVersion="$(FullVersion)">
    </PopulateReadme>
  </Target>
  <!--
Target that will remove the Nuget Package
-->
  <Target Name="CleanNuGet">
    <CreateItem Include="$(OutputPath)\*.nupkg">
      <Output TaskParameter="Include" ItemName="NugetFiles" />
    </CreateItem>
    <Delete Files="@(NugetFiles)" />
  </Target>
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      CleanNuGet;
    </CleanDependsOn>
  </PropertyGroup>
</Project>